// ABOUTME: Prisma schema file for ProfiCo Inventory Management System
// ABOUTME: Defines database models for users, equipment, subscriptions, and related entities

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?   // For email/password auth
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "admin", "team_lead", "user"
  teamId        String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  team                   Team?              @relation(fields: [teamId], references: [id])
  ownedEquipment         Equipment[]        @relation("EquipmentOwner")
  createdEquipment       Equipment[]        @relation("EquipmentCreator")
  equipmentRequests      EquipmentRequest[] @relation("RequesterRequests")
  approvedRequests       EquipmentRequest[] @relation("ApproverRequests")
  subscriptions          Subscription[]
  equipmentHistoryFrom   EquipmentHistory[] @relation("HistoryFromUser")
  equipmentHistoryTo     EquipmentHistory[] @relation("HistoryToUser")
  uploadedFiles          File[]
  transferRequestsFrom   EquipmentTransferRequest[] @relation("EquipmentTransferRequestFrom")
  transferRequestsTo     EquipmentTransferRequest[] @relation("EquipmentTransferRequestTo")
  transferRequestsInitiated EquipmentTransferRequest[] @relation("EquipmentTransferRequestBy")
  transferRequestsApproved EquipmentTransferRequest[] @relation("EquipmentTransferRequestApproved")
  requestHistory          RequestHistory[] @relation("RequestHistoryUser")
  processedInvoices      Invoice[]         @relation("processedInvoices")
  activityLogs           ActivityLog[]

  // NextAuth.js relations
  accounts      Account[]
  sessions      Session[]
  processedPayments      Payment[] @relation("PaymentProcessor")

  @@map("users")
}

model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  leaderId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members User[]

  @@map("teams")
}

model EquipmentCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("bg-blue-100 text-blue-800")
  icon        String   @default("monitor")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  equipment Equipment[] @relation("EquipmentCategory")

  @@map("equipment_categories")
}

model EquipmentTag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String   @default("bg-blue-100 text-blue-800")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  equipment Equipment[] @relation("EquipmentTags")

  @@map("equipment_tags")
}

model Equipment {
  id                String    @id @default(cuid())
  serialNumber      String    @unique
  name              String
  brand             String?
  model             String?
  category          String    // "computers", "mobile_devices", "peripherals", etc.
  categoryId        String?   // Reference to EquipmentCategory
  purchaseDate      DateTime
  purchaseMethod    String    // "company_card", "zopi", "leasing", "personal"
  purchasePrice     Float?
  currentOwnerId    String?
  status            String    @default("available") // "pending", "available", "assigned", etc.
  specifications    String?   // JSON string for flexible specs
  warrantyExpiry   DateTime?
  warrantyInfo      String?
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  pins              String?   // For tablets/phones
  photos            String?   // JSON array of photo URLs
  invoiceUrl        String?
  location          String?
  condition         String?
  notes             String?
  invoiceId         String?
  createdBy         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  currentOwner     User?                @relation("EquipmentOwner", fields: [currentOwnerId], references: [id])
  categoryObj      EquipmentCategory?  @relation("EquipmentCategory", fields: [categoryId], references: [id])
  tags             EquipmentTag[]      @relation("EquipmentTags")
  requests         EquipmentRequest[]
  history          EquipmentHistory[]
  maintenanceRecords MaintenanceRecord[]
  files            File[]
  transferRequests EquipmentTransferRequest[]
  invoice          Invoice?             @relation(fields: [invoiceId], references: [id])
  creator          User?                @relation("EquipmentCreator", fields: [createdBy], references: [id])

  @@map("equipment")
}

model EquipmentRequest {
  id                    String    @id @default(cuid())
  requesterId           String
  equipmentId           String?
  equipmentType         String    // What type of equipment is being requested
  justification         String
  status                String    @default("pending") // "pending", "approved", "rejected", "ordered", "fulfilled"
  teamLeadApproval      Boolean?
  adminApproval         Boolean?
  approverId            String?
  rejectionReason       String?
  priority              String    @default("medium") // "low", "medium", "high", "urgent"
  neededBy              DateTime? // When the equipment is needed
  budget                Float?    // Expected budget for the equipment
  specificRequirements  String?   // Additional requirements or specifications
  approvalNotes         String?   // Notes from the approver
  statusNotes           String?   // Notes for status updates
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  requester     User            @relation("RequesterRequests", fields: [requesterId], references: [id])
  approver      User?           @relation("ApproverRequests", fields: [approverId], references: [id])
  equipment     Equipment?      @relation(fields: [equipmentId], references: [id])
  history       RequestHistory[]

  @@map("equipment_requests")
}

model RequestHistory {
  id          String   @id @default(cuid())
  requestId   String
  userId      String   // User who performed the action
  action      String   // "created", "team_lead_approved", "team_lead_rejected", "admin_approved", "admin_rejected", "status_changed", "equipment_assigned"
  oldStatus   String?  // Previous status before the action
  newStatus   String?  // New status after the action
  notes       String?  // Notes or justification for the action
  metadata    String?  // JSON field for additional data (rejection reason, approval notes, etc.)
  createdAt   DateTime @default(now())

  // Relations
  request EquipmentRequest @relation(fields: [requestId], references: [id])
  user    User             @relation("RequestHistoryUser", fields: [userId], references: [id])

  @@map("request_history")
}

model EquipmentHistory {
  id         String   @id @default(cuid())
  equipmentId String
  fromUserId String?
  toUserId   String?
  action     String   // "assigned", "transferred", "returned", "maintenance", etc.
  condition  String?  // Equipment condition during transfer
  notes      String?
  createdAt  DateTime @default(now())

  // Relations
  equipment Equipment @relation(fields: [equipmentId], references: [id])
  fromUser  User?     @relation("HistoryFromUser", fields: [fromUserId], references: [id])
  toUser    User?     @relation("HistoryToUser", fields: [toUserId], references: [id])

  @@map("equipment_history")
}

model MaintenanceRecord {
  id          String    @id @default(cuid())
  equipmentId String
  description String
  type        String    @default("corrective") // "preventive", "corrective", "emergency", "upgrade", "inspection"
  date        DateTime
  cost        Float?
  performedBy String?
  status      String    @default("pending") // "pending", "in_progress", "completed"
  scheduledAt DateTime?
  completedAt DateTime?
  vendor      String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  equipment Equipment @relation(fields: [equipmentId], references: [id])

  @@map("maintenance_records")
}

model Subscription {
  id               String   @id @default(cuid())
  softwareName     String
  assignedUserId   String
  assignedUserEmail String
  price            Float
  billingFrequency String   // "monthly", "yearly"
  paymentMethod    String   // "company_card", "personal_card"
  invoiceRecipient String
  isReimbursement  Boolean  @default(false)
  isActive         Boolean  @default(true)
  renewalDate      DateTime
  invoices         String?  // JSON array of invoice URLs
  vendor           String?
  licenseKey       String?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  assignedUser User @relation(fields: [assignedUserId], references: [id])
  subscriptionInvoices SubscriptionInvoice[]

  @@map("subscriptions")
}

model SubscriptionInvoice {
  id            String   @id @default(cuid())
  subscriptionId String
  vendor        String
  amount        Float
  dueDate       DateTime
  status        String   @default("pending") // "pending", "paid", "overdue", "cancelled"
  invoiceNumber String?
  description   String?
  invoiceUrl    String?
  fileName      String?
  fileType      String?
  fileSize      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  payments     Payment[]

  @@map("subscription_invoices")
}

model Payment {
  id            String    @id @default(cuid())
  invoiceId     String
  amount        Float
  paymentMethod String    // "bank_transfer", "credit_card", "paypal", "other"
  transactionId String?
  status        String    @default("pending") // "pending", "completed", "failed", "refunded"
  processedById String
  processedAt   DateTime  @default(now())
  notes         String?
  refundAmount  Float?
  refundReason  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  invoice       SubscriptionInvoice @relation(fields: [invoiceId], references: [id])
  processedBy   User             @relation("PaymentProcessor", fields: [processedById], references: [id])
  
  @@map("payments")
}

model InventoryCheck {
  id              String    @id @default(cuid())
  name            String
  description     String?
  status          String    @default("pending") // "pending", "in_progress", "completed"
  scheduledAt     DateTime
  completedAt     DateTime?
  createdById     String
  equipmentCount  Int       @default(0)
  verifiedCount   Int       @default(0)
  discrepancies   String?   // JSON array of discrepancy details
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("inventory_checks")
}

model SmallInventoryItem {
  id           String  @id @default(cuid())
  name         String
  category     String
  currentStock Int     @default(0)
  minStock     Int     @default(0)
  maxStock     Int?
  unitPrice    Float?
  location     String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("small_inventory_items")
}

model File {
  id           String   @id @default(cuid())
  name         String
  url          String   // Uploadthing URL
  size         Int      // File size in bytes
  type         String   // MIME type
  description  String?
  equipmentId  String?
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  equipment    Equipment? @relation(fields: [equipmentId], references: [id])
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])

  @@map("files")
}

model Invoice {
  id                String    @id @default(cuid())
  vendor            String
  invoiceNumber     String?
  invoiceDate       DateTime?
  amount            Float?
  purchaseMethod    String    @default("Off-the-shelf") // "ProfiCo", "ZOPI", "Leasing", "Off-the-shelf"
  depreciationPeriod Int      @default(24)
  status            String    @default("draft") // "draft", "processed", "completed"
  confidence        Float     @default(0)
  rawText           String?
  equipmentCount    Int       @default(0)
  processedBy       String
  validationErrors  String?   // JSON array of error messages
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  processedByUser   User       @relation("processedInvoices", fields: [processedBy], references: [id])
  equipment         Equipment[]

  @@map("invoices")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // "OCR_PROCESSING", "EQUIPMENT_CREATED", "INVOICE_PROCESSED", etc.
  details   String?  // JSON string with additional context
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model EquipmentTransferRequest {
  id               String   @id @default(cuid())
  equipmentId      String
  fromUserId       String?
  toUserId         String
  requestedById    String
  approverId       String?
  reason           String
  notes            String?
  condition        String?
  status           String   @default("pending") // "pending", "approved", "rejected"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  equipment        Equipment @relation(fields: [equipmentId], references: [id])
  fromUser         User?     @relation("EquipmentTransferRequestFrom", fields: [fromUserId], references: [id])
  toUser           User      @relation("EquipmentTransferRequestTo", fields: [toUserId], references: [id])
  requestedBy      User      @relation("EquipmentTransferRequestBy", fields: [requestedById], references: [id])
  approver         User?     @relation("EquipmentTransferRequestApproved", fields: [approverId], references: [id])

  @@map("equipment_transfer_requests")
}

// NextAuth.js required models
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
